// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int

  // Relasi balik ke log & maintenance
  assetLogs    AssetLog[]
  maintenances Maintenance[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Location {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  address String?
  assets  Asset[]
}

model Asset {
  id                String      @id @default(cuid())
  productName       String
  status            AssetStatus @default(BAIK)
  purchaseDate      DateTime
  location          Location    @relation(fields: [locationId], references: [id])
  locationId        Int
  picName           String?
  picContact        String?
  assetType         String
  barcode           String      @unique
  price             Decimal     @db.Decimal(12, 2)
  usefulLife        Int
  salvageValue      Decimal     @db.Decimal(12, 2)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  imageUrl          String?
  productionYear    Int?
  distributor       String?
  calibrationDate   DateTime?
  calibrationPeriod Int?
  
  // Kolom dari migrasi yang hilang
  accessories       String?
  position          String?

  maintenances Maintenance[]
  logs         AssetLog[]
}

enum AssetStatus {
  BAIK
  RUSAK
  PERBAIKAN
  DIPINJAM
  KALIBRASI_EXPIRED
}

model Maintenance {
  id             String            @id @default(cuid())
  description    String
  status         MaintenanceStatus @default(SCHEDULED)
  cost           Float?
  scheduledDate  DateTime?
  completionDate DateTime?
  notes          String?           @db.Text
  asset          Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId        String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relasi ke User
  recordedById   Int?
  recordedBy     User?             @relation(fields: [recordedById], references: [id], onDelete: SetNull)
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model AssetLog {
  id          String   @id @default(cuid())
  activity    String
  description String
  createdAt   DateTime @default(now())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  // Relasi ke User yang sudah diperbaiki
  recordedById Int?
  recordedBy   User?    @relation(fields: [recordedById], references: [id], onDelete: SetNull)
}